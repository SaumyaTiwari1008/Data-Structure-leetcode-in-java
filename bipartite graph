class Solution {
    
    public boolean isBipartite(int[][] graph) {
    
    int V=graph.length;
    int colour[]=new int[V];
    Arrays.fill(colour,-1);
    for (int i = 0; i < V; i++)
            if (colour[i] == -1)
                if (check(graph, i, colour,1)
                    == false)
                    return false;
 
        return true;
    }
    public boolean check(int graph[][],int u,int colors[],int col)  //dfs
    {
             if (colors[u] == 1 - col){           //1-col   // Assign alternate color to the adjacent v of u
            return false; 
        } 
        if (colors[u] == col) {
            return true; 
        }
        colors[u] = col;
        for (var neighbor: graph[u]) {
            if (!check( graph,neighbor, colors, 1 - col)) {
                return false;
            }
        }
        return true;
    }
}
